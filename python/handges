import cv2
import mediapipe as mp
import math
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL

# Volume setup using pycaw
devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))

# Mediapipe hand detector setup
cap = cv2.VideoCapture(0)
mpHands = mp.solutions.hands
hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mpDraw = mp.solutions.drawing_utils

# Volume mapping range (you can adjust this based on your hand span)
min_dist = 30    # distance when fingers are closed
max_dist = 150   # distance when fingers are wide apart

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)

    if results.multi_hand_landmarks:
        handLms = results.multi_hand_landmarks[0]
        lmList = []
        for id, lm in enumerate(handLms.landmark):
            h, w, c = img.shape
            cx, cy = int(lm.x * w), int(lm.y * h)
            lmList.append((id, cx, cy, lm.z))

        mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

        # Thumb tip = id 4, Index tip = id 8
        x1, y1, z1 = lmList[4][1], lmList[4][2], lmList[4][3]
        x2, y2, z2 = lmList[8][1], lmList[8][2], lmList[8][3]

        # Calculate 3D distance (with z axis)
        distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + ((z2 - z1) * 100) ** 2)

        # Map to volume
        vol = (distance - min_dist) / (max_dist - min_dist)
        vol = min(max(vol, 0.0), 1.0)

        volume.SetMasterVolumeLevelScalar(vol, None)

        # Display info
        cv2.putText(img, f'Vol: {int(vol * 100)}%', (10, 40),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.circle(img, (x1, y1), 10, (255, 0, 255), -1)
        cv2.circle(img, (x2, y2), 10, (255, 0, 255), -1)
        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 0), 2)

    cv2.imshow("Hand Gesture Volume Control", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

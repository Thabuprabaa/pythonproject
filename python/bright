import cv2
import mediapipe as mp
import numpy as np
import math
import screen_brightness_control as sbc

# Initialize MediaPipe
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mp_draw = mp.solutions.drawing_utils

# Start Webcam
cap = cv2.VideoCapture(0)

while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)
    h, w, _ = img.shape

    # Process the image
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    result = hands.process(img_rgb)

    if result.multi_hand_landmarks:
        for handLms in result.multi_hand_landmarks:
            mp_draw.draw_landmarks(img, handLms, mp_hands.HAND_CONNECTIONS)
            lm_list = []

            for id, lm in enumerate(handLms.landmark):
                cx, cy = int(lm.x * w), int(lm.y * h)
                lm_list.append((id, cx, cy))

            if lm_list:
                x1, y1 = lm_list[4][1], lm_list[4][2]   # Thumb tip
                x2, y2 = lm_list[8][1], lm_list[8][2]   # Index tip

                # Draw on screen
                cv2.circle(img, (x1, y1), 10, (0, 0, 255), -1)
                cv2.circle(img, (x2, y2), 10, (0, 0, 255), -1)
                cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 2)

                # Calculate distance
                length = math.hypot(x2 - x1, y2 - y1)

                # Convert distance to brightness range (0â€“100)
                brightness = np.interp(length, [20, 200], [0, 100])
                sbc.set_brightness(int(brightness))

                # Optional: Display brightness level
                cv2.putText(img, f'Brightness: {int(brightness)}%', (10, 70),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

    cv2.imshow("Brightness Control", img)
    if cv2.waitKey(1) & 0xFF == 27:  # ESC key to exit
        break

cap.release()
cv2.destroyAllWindows()
